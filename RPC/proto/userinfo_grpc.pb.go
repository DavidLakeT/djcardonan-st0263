// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: RPC/proto/userinfo.proto

package RPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FilesInformation_ListFiles_FullMethodName   = "/grpc.FilesInformation/ListFiles"
	FilesInformation_SearchFiles_FullMethodName = "/grpc.FilesInformation/SearchFiles"
)

// FilesInformationClient is the client API for FilesInformation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesInformationClient interface {
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*FilesResponse, error)
	SearchFiles(ctx context.Context, in *SearchFilesRequest, opts ...grpc.CallOption) (*FilesResponse, error)
}

type filesInformationClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesInformationClient(cc grpc.ClientConnInterface) FilesInformationClient {
	return &filesInformationClient{cc}
}

func (c *filesInformationClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*FilesResponse, error) {
	out := new(FilesResponse)
	err := c.cc.Invoke(ctx, FilesInformation_ListFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesInformationClient) SearchFiles(ctx context.Context, in *SearchFilesRequest, opts ...grpc.CallOption) (*FilesResponse, error) {
	out := new(FilesResponse)
	err := c.cc.Invoke(ctx, FilesInformation_SearchFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesInformationServer is the server API for FilesInformation service.
// All implementations must embed UnimplementedFilesInformationServer
// for forward compatibility
type FilesInformationServer interface {
	ListFiles(context.Context, *ListFilesRequest) (*FilesResponse, error)
	SearchFiles(context.Context, *SearchFilesRequest) (*FilesResponse, error)
	mustEmbedUnimplementedFilesInformationServer()
}

// UnimplementedFilesInformationServer must be embedded to have forward compatible implementations.
type UnimplementedFilesInformationServer struct {
}

func (UnimplementedFilesInformationServer) ListFiles(context.Context, *ListFilesRequest) (*FilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFilesInformationServer) SearchFiles(context.Context, *SearchFilesRequest) (*FilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFiles not implemented")
}
func (UnimplementedFilesInformationServer) mustEmbedUnimplementedFilesInformationServer() {}

// UnsafeFilesInformationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesInformationServer will
// result in compilation errors.
type UnsafeFilesInformationServer interface {
	mustEmbedUnimplementedFilesInformationServer()
}

func RegisterFilesInformationServer(s grpc.ServiceRegistrar, srv FilesInformationServer) {
	s.RegisterService(&FilesInformation_ServiceDesc, srv)
}

func _FilesInformation_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesInformationServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesInformation_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesInformationServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesInformation_SearchFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesInformationServer).SearchFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesInformation_SearchFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesInformationServer).SearchFiles(ctx, req.(*SearchFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesInformation_ServiceDesc is the grpc.ServiceDesc for FilesInformation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesInformation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FilesInformation",
	HandlerType: (*FilesInformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _FilesInformation_ListFiles_Handler,
		},
		{
			MethodName: "SearchFiles",
			Handler:    _FilesInformation_SearchFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RPC/proto/userinfo.proto",
}
