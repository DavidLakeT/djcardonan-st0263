// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: proto/userinfo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserInformation_GetUserInformation_FullMethodName = "/grpc.UserInformation/GetUserInformation"
)

// UserInformationClient is the client API for UserInformation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserInformationClient interface {
	GetUserInformation(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserResponse, error)
}

type userInformationClient struct {
	cc grpc.ClientConnInterface
}

func NewUserInformationClient(cc grpc.ClientConnInterface) UserInformationClient {
	return &userInformationClient{cc}
}

func (c *userInformationClient) GetUserInformation(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserInformation_GetUserInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserInformationServer is the server API for UserInformation service.
// All implementations must embed UnimplementedUserInformationServer
// for forward compatibility
type UserInformationServer interface {
	GetUserInformation(context.Context, *UserInfo) (*UserResponse, error)
	mustEmbedUnimplementedUserInformationServer()
}

// UnimplementedUserInformationServer must be embedded to have forward compatible implementations.
type UnimplementedUserInformationServer struct {
}

func (UnimplementedUserInformationServer) GetUserInformation(context.Context, *UserInfo) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInformation not implemented")
}
func (UnimplementedUserInformationServer) mustEmbedUnimplementedUserInformationServer() {}

// UnsafeUserInformationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserInformationServer will
// result in compilation errors.
type UnsafeUserInformationServer interface {
	mustEmbedUnimplementedUserInformationServer()
}

func RegisterUserInformationServer(s grpc.ServiceRegistrar, srv UserInformationServer) {
	s.RegisterService(&UserInformation_ServiceDesc, srv)
}

func _UserInformation_GetUserInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserInformationServer).GetUserInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserInformation_GetUserInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserInformationServer).GetUserInformation(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// UserInformation_ServiceDesc is the grpc.ServiceDesc for UserInformation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserInformation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.UserInformation",
	HandlerType: (*UserInformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInformation",
			Handler:    _UserInformation_GetUserInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/userinfo.proto",
}
